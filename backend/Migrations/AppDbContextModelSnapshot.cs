// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Entities.ScenarioResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("WebSiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WebSiteId");

                    b.ToTable("ScenarioResults");
                });

            modelBuilder.Entity("backend.Entities.TestScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<bool>("CheckJson")
                        .HasColumnType("boolean");

                    b.Property<bool>("CheckXml")
                        .HasColumnType("boolean");

                    b.Property<string>("ExpectedContent")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WebSiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WebSiteId");

                    b.ToTable("TestScenarios");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Entities.WebSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DNS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpectedContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SSL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalErrors")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WebSites");
                });

            modelBuilder.Entity("backend.Entities.WebSiteData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("WebSiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WebSiteId");

                    b.ToTable("WebSiteData");
                });

            modelBuilder.Entity("backend.Entities.ScenarioResult", b =>
                {
                    b.HasOne("backend.Entities.WebSite", "WebSite")
                        .WithMany("TestsData")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("backend.Entities.TestScenario", b =>
                {
                    b.HasOne("backend.Entities.WebSite", "WebSite")
                        .WithMany("TestScenarios")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("backend.Entities.WebSite", b =>
                {
                    b.HasOne("backend.Entities.User", "User")
                        .WithMany("Sites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Entities.WebSiteData", b =>
                {
                    b.HasOne("backend.Entities.WebSite", "WebSite")
                        .WithMany("WebSiteData")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("backend.Entities.WebSite", b =>
                {
                    b.Navigation("TestScenarios");

                    b.Navigation("TestsData");

                    b.Navigation("WebSiteData");
                });
#pragma warning restore 612, 618
        }
    }
}
